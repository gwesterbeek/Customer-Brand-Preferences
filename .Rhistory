list=FALSE)
training <- Dataset[ inTrain,]
testing <- Dataset[-inTrain,]
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
mtryGrid <- expand.grid(mtry = 6)
RFFit <- train(brand ~ .,
data = training,
method = "rf",
tunegrid = mtryGrid,
trControl = ctrl)
# check errors on testing RF
predictions <- predict(object = RFFit, newdata = testing)
testing$pred <- predictions
# metrics
postResample(pred = predictions, obs = testing$brand)
Dataset %>%
ggplot(aes(age, salary)) +
geom_point(aes(color = brand_name))
RFFit <- train(brand ~ salary + age,
data = training,
method = "rf",
tunegrid = mtryGrid,
trControl = ctrl)
RFFit <- train(brand_name ~ salary + age,
data = training,
method = "rf",
tunegrid = mtryGrid,
trControl = ctrl)
# check errors on testing RF
predictions <- predict(object = RFFit, newdata = testing)
testing$pred <- predictions
# metrics
postResample(pred = predictions, obs = testing$brand)
# metrics
postResample(pred = predictions, obs = testing$brand_name)
# check errors on testing RF
predictions <- predict(object = RFFit, newdata = testing)
testing$pred <- predictions
# metrics
postResample(pred = predictions, obs = testing$brand_name)
# check errors on testing RF
predictions <- predict(object = RFFit, newdata = testing)
testing$pred <- predictions
# metrics
postResample(pred = predictions, obs = testing$brand_name)
RFFit <- train(brand_name ~ salary + age,
data = training,
method = "rf",
tunegrid = mtryGrid,
trControl = ctrl)
predictions <- predict(object = RFFit, newdata = testing)
testing$pred <- predictions
# metrics
postResample(pred = predictions, obs = testing$brand_name)
RFFit <- train(brand ~ salary + age,
data = training,
method = "rf",
tunegrid = mtryGrid,
trControl = ctrl)
library(ggplot2)
library(dplyr)
library (gcookbook)
Dataset$brand_name <- apply(Dataset["brand"],
MARGIN = 2,
function(x) if_else(x == 0, "Acer", "Sony"))
Dataset$brand_name<- as.factor(Dataset$brand_name)
Dataset %>%
group_by(brand-name) %>%
summarize(mean_salary = mean(salary, na.rm = TRUE) -> dataset2
Dataset %>%
group_by(brand) %>%
summarize(mean_credit = mean(credit, na.rm = TRUE)) -> dataset3
Dataset %>%
group_by(brand) %>%
summarize(mean_age = mean(age, na.rm = TRUE)) -> dataset4
ggplot(dataset2, aes(x = elevel , y = mean_salary, fill = brand)) +
geom_col(position = "dodge")
ggplot(dataset2, aes(x = brand , y = mean_salary)) +
geom_col()
ggplot(dataset2, aes(x = zipcode , y = mean_salary, fill = brand)) +
geom_col()
ggplot(dataset2, aes(x = car , y = mean_salary, fill = brand)) +
geom_col()
ggplot(dataset2, aes(x = zipcode , y = mean_salary, fill = brand)) +
geom_col()
# Create bargraph of count ####
ggplot(Dataset, aes(x = brand)) +
geom_histogram(stat = "count")
ggplot(Dataset, aes(x = car)) +
geom_bar()
ggplot(Dataset, aes(x = zipcode)) +
geom_bar()
ggplot(age, aes(x = age)) +
geom_bar()
ggplot(Dataset, aes(x = agecat)) +
geom_bar()
# Create histogram ####
hist(Dataset$salary)
hist(Dataset$age)
hist(Dataset$credit)
hist(Dataset$zipcode)
hist(Dataset$credit)
hist(Dataset$brand)
hist(Dataset$elevel)
hist(Dataset$brand)
ggplot(Dataset, aes(x = salary)) +
geom_histogram(binwidth = 20000, fill = "white", colour = "black")
ggplot(Dataset, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "white", colour = "black")
ggplot(Dataset, aes(x = credit)) +
geom_histogram(binwidth = 50000, fill = "white", colour = "black")
# Train C5.0 model ####
str(Dataset)
library(caret)
library(lattice)
install.packages("C50")
library(C50)
install.packages("inum")
library(inum)
set.seed(123)
inTrain <- createDataPartition(y = Dataset$brand, p=.75,
list=FALSE)
training <- Dataset[ inTrain,]
testing <- Dataset[-inTrain,]
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
C5.0Fit <- train(brand ~ .,
data = training,
method = "C5.0",
tuneLength = 2,
trControl = ctrl)
C5.0Fit
modelLookup("C5.0")
# check errors on testing C5.0
predictions <- predict(object = C5.0Fit, newdata = testing)
testing$pred <- predictions
head(testing)
# metrics
pred = predictions, obs = testing$brand)
install.packages("C50")
install.packages("inum")
install.packages("inum")
Dataset %>%
group_by(brand-name) %>%
summarize(mean_salary = mean(salary, na.rm = TRUE) -> dataset2
Dataset %>%
group_by(brand) %>%
summarize(mean_credit = mean(credit, na.rm = TRUE)) -> dataset3
Dataset %>%
group_by(brand) %>%
summarize(mean_age = mean(age, na.rm = TRUE)) -> dataset4
ggplot(dataset2, aes(x = elevel , y = mean_salary, fill = brand)) +
geom_col(position = "dodge")
ggplot(dataset2, aes(x = brand , y = mean_salary)) +
geom_col()
ggplot(dataset2, aes(x = zipcode , y = mean_salary, fill = brand)) +
geom_col()
ggplot(dataset2, aes(x = car , y = mean_salary, fill = brand)) +
geom_col()
ggplot(dataset2, aes(x = zipcode , y = mean_salary, fill = brand)) +
geom_col()
# Create bargraph of count ####
ggplot(Dataset, aes(x = brand)) +
geom_histogram(stat = "count")
ggplot(Dataset, aes(x = car)) +
geom_bar()
ggplot(Dataset, aes(x = zipcode)) +
geom_bar()
ggplot(age, aes(x = age)) +
geom_bar()
ggplot(Dataset, aes(x = agecat)) +
geom_bar()
# Create histogram ####
hist(Dataset$salary)
hist(Dataset$age)
hist(Dataset$credit)
hist(Dataset$zipcode)
hist(Dataset$credit)
hist(Dataset$brand)
hist(Dataset$elevel)
hist(Dataset$brand)
ggplot(Dataset, aes(x = salary)) +
geom_histogram(binwidth = 20000, fill = "white", colour = "black")
ggplot(Dataset, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "white", colour = "black")
ggplot(Dataset, aes(x = credit)) +
geom_histogram(binwidth = 50000, fill = "white", colour = "black")
# Train C5.0 model ####
str(Dataset)
library(caret)
library(lattice)
install.packages("C50")
library(C50)
install.packages("inum")
library(inum)
set.seed(123)
inTrain <- createDataPartition(y = Dataset$brand, p=.75,
list=FALSE)
training <- Dataset[ inTrain,]
testing <- Dataset[-inTrain,]
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
C5.0Fit <- train(brand ~ .,
data = training,
method = "C5.0",
tuneLength = 2,
trControl = ctrl)
C5.0Fit
modelLookup("C5.0")
# check errors on testing C5.0
predictions <- predict(object = C5.0Fit, newdata = testing)
testing$pred <- predictions
head(testing)
# metrics
pred = predictions, obs = testing$brand)
install.packages("C50")
install.packages("inum")
install.packages("inum")
Dataset$brand_name <- apply(Dataset["brand"],
MARGIN = 2,
function(x) if_else(x == 0, "Acer", "Sony"))
Dataset %>%
group_by(brand-name) %>%
summarize(mean_salary = mean(salary, na.rm = TRUE) -> dataset2
Dataset %>%
group_by(brand) %>%
summarize(mean_credit = mean(credit, na.rm = TRUE)) -> dataset3
Dataset %>%
group_by(brand) %>%
summarize(mean_age = mean(age, na.rm = TRUE)) -> dataset4
ggplot(dataset2, aes(x = elevel , y = mean_salary, fill = brand)) +
geom_col(position = "dodge")
ggplot(dataset2, aes(x = brand , y = mean_salary)) +
geom_col()
ggplot(dataset2, aes(x = zipcode , y = mean_salary, fill = brand)) +
geom_col()
ggplot(dataset2, aes(x = car , y = mean_salary, fill = brand)) +
geom_col()
ggplot(dataset2, aes(x = zipcode , y = mean_salary, fill = brand)) +
geom_col()
# Create bargraph of count ####
ggplot(Dataset, aes(x = brand)) +
geom_histogram(stat = "count")
ggplot(Dataset, aes(x = car)) +
geom_bar()
ggplot(Dataset, aes(x = zipcode)) +
geom_bar()
ggplot(age, aes(x = age)) +
geom_bar()
ggplot(Dataset, aes(x = agecat)) +
geom_bar()
# Create histogram ####
hist(Dataset$salary)
hist(Dataset$age)
hist(Dataset$credit)
hist(Dataset$zipcode)
hist(Dataset$credit)
hist(Dataset$brand)
hist(Dataset$elevel)
hist(Dataset$brand)
ggplot(Dataset, aes(x = salary)) +
geom_histogram(binwidth = 20000, fill = "white", colour = "black")
ggplot(Dataset, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "white", colour = "black")
ggplot(Dataset, aes(x = credit)) +
geom_histogram(binwidth = 50000, fill = "white", colour = "black")
# Train C5.0 model ####
str(Dataset)
library(caret)
library(lattice)
install.packages("C50")
library(C50)
install.packages("inum")
library(inum)
set.seed(123)
inTrain <- createDataPartition(y = Dataset$brand, p=.75,
list=FALSE)
training <- Dataset[ inTrain,]
testing <- Dataset[-inTrain,]
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
C5.0Fit <- train(brand ~ .,
data = training,
method = "C5.0",
tuneLength = 2,
trControl = ctrl)
C5.0Fit
modelLookup("C5.0")
# check errors on testing C5.0
predictions <- predict(object = C5.0Fit, newdata = testing)
testing$pred <- predictions
head(testing)
# metrics
pred = predictions, obs = testing$brand)
install.packages("C50")
install.packages("inum")
install.packages("inum")
library(ggplot2)
library(dplyr)
library("ggplot2"
library (gcookbook)
library(caret)
library(lattice)
library(C50)
library(inum)
library(inum)
library(C50)
library (gcookbook)
library(ggplot2)
library(dplyr)
Dataset %>%
group_by(brand) %>%
summarize(mean_salary = mean(salary, na.rm = TRUE)) -> dataset2
Dataset %>%
group_by(brand) %>%
summarize(mean_credit = mean(credit, na.rm = TRUE)) -> dataset3
Dataset %>%
group_by(brand) %>%
summarize(mean_age = mean(age, na.rm = TRUE)) -> dataset4
# Create bargraph of count ####
ggplot(Dataset, aes(x = brand)) +
geom_histogram(stat = "count")
hist(Dataset$brand)
Summary(Dataset)
summary(Dataset)
set.seed(123)
inTrain <- createDataPartition(y = Dataset$brand, p=.75,
list=FALSE)
training <- Dataset[ inTrain,]
testing <- Dataset[-inTrain,]
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
# Train RF model ####
library(randomForest)
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
mtryGrid <- expand.grid(mtry = 6)
RFFit <- train(brand ~ age + salary,
data = training,
method = "rf",
tunegrid = mtryGrid,
trControl = ctrl)
summary(DataInc)
plot(RFFitImp, top = 10)
varImpPlot(RFFIT)
varImpPlot(RFFit)
class(RFFit)
RFFitImp<- varImp(RFFit, scale = TRUE)
plot(RFFitImp, top = 10)
RFFitImp<- varImp(RFFit, scale = FALSE)
varImp
plot(RFFitImp, top = 10)
RFFitImp<- varImp(RFFit, scale = TRUE)
plot(RFFitImp, top = 10)
RFFitImp<- varImp(RFFit, scale = FALSE)
set.seed(123)
inTrain <- createDataPartition(y = Dataset$brand, p=.75,
list=FALSE)
training <- Dataset[ inTrain,]
testing <- Dataset[-inTrain,]
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
# Train RF model ####
library(randomForest)
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
mtryGrid <- expand.grid(mtry = 6)
RFFit <- train(brand ~ age + salary,
data = training,
method = "rf",
tunegrid = mtryGrid,
trControl = ctrl)
RFFit <- train(brand ~ .,
data = training,
method = "rf",
tunegrid = mtryGrid,
trControl = ctrl)
RFFitImp<- varImp(RFFit, scale = FALSE)
plot(RFFitImp, top = 10)
RFFitImp<- varImp(RFFit, scale = TRUE)
plot(RFFitImp, top = 10)
plot(RFFitImp, top = 10, main = test)
plot(RFFitImp, top = 10)
library(ggplot2)
library(dplyr)
library (gcookbook)
library(caret)
library(lattice)
library(C50)
library(inum)
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
set.seed(123)
knnFit <- train(brand ~ .,
data = training,
method = "knn",
tuneLength = 15,
preProcess =c("center", "scale"),
trControl = ctrl)
# Train RF model ####
library(randomForest)
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
mtryGrid <- expand.grid(mtry = 6)
RFFit <- train(brand ~ .,
data = training,
method = "rf",
tunegrid = mtryGrid,
trControl = ctrl)
# check errors on testing RF
predictions <- predict(object = RFFit, newdata = testing)
testing$pred <- predictions
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "white")) +
theme(legend.position="none")
RF_Plot
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "green")) +
theme(legend.position="none")
RF_Plot
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme(legend.position="none")
RF_Plot
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme()
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme()
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme(element)
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme(element_blank())
RF_Plot
library(dplyr)
Dataset$brand_name <- apply(Dataset["brand"],
MARGIN = 2,
function(x) if_else(x == 0, "Acer", "Sony"))
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme(element_blank())
RF_Plot
View(testing)
set.seed(123)
inTrain <- createDataPartition(y = Dataset$brand, p=.75,
list=FALSE)
training <- Dataset[ inTrain,]
testing <- Dataset[-inTrain,]
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
mtryGrid <- expand.grid(mtry = 6)
RFFit <- train(brand ~ .,
data = training,
method = "rf",
tunegrid = mtryGrid,
trControl = ctrl)
# check errors on testing RF
predictions <- predict(object = RFFit, newdata = testing)
testing$pred <- predictions
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme(element_blank())
RF_Plot
View(testing)
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme(element_blank(brand_name))
RF_Plot
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme(element_blank(brand_name))
View(testing)
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme(element_blank(testing$brand_name))
testing$brand_name_pred. <- apply(testing["pred"],
MARGIN = 2,
function(x) if_else(x == 0, "Acer", "Sony"))
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$pred)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme(element_blank())
RF_Plot
RF_Plot<- testing %>% ggplot(aes(x = age, y = salary)) +
geom_point(aes(color = testing$brand_name_pred.)) +
labs(title = "RF model with predictors Age and Salary") +
scale_color_manual(values = c("royalblue4", "red")) +
theme(element_blank())
RF_Plot
varImp
RFFitImp<- varImp(RFFit, scale = TRUE)
plot(RFFitImp, top = 10)
